---
apiVersion: v1
kind: Secret
metadata:
  name: n8n-secrets
  namespace: n8n-ha 
stringData:
  DB_USER: n8n
  DB_PASSWORD: n8npass
  DB_NAME: n8n
  DB_POSTGRESDB: postgres
  REDIS_PASSWORD: redispass
  N8N_JWT_SECRET: superjwtsecret
  N8N_ENCRYPTION_KEY: superencryptionkey
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: n8n-pvc
  namespace: n8n-ha
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: bitnami/postgresql:latest
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        env:
        - name: POSTGRESQL_USERNAME
          valueFrom:
            secretKeyRef:
              name: n8n-secrets
              key: DB_USER
        - name: POSTGRESQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: n8n-secrets
              key: DB_PASSWORD
        - name: POSTGRESQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: n8n-secrets
              key: DB_NAME
        volumeMounts:
        - name: postgres-storage
          mountPath: /bitnami/postgresql
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  ports:
    - port: 5432
  selector:
    app: postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: bitnami/redis:latest
        command: ["redis-server", "--requirepass", "$(REDIS_PASSWORD)"]
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: n8n-secrets
              key: REDIS_PASSWORD
        - name: ALLOW_EMPTY_PASSWORD
          value: "no"  
        volumeMounts:
        - name: redis-storage
          mountPath: /bitnami/redis/data
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  ports:
    - port: 6379
  selector:
    app: redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: n8n-main
  namespace: n8n-ha
spec:
  replicas: 1
  selector:
    matchLabels:
      app: n8n
      role: main
  template:
    metadata:
      labels:
        app: n8n
        role: main
    spec:
      containers:
      - name: n8n
        image: n8nio/n8n
        ports:
        - containerPort: 5678
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 5678
          initialDelaySeconds: 10
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /
            port: 5678
          initialDelaySeconds: 5
          periodSeconds: 10
        env:
        - name: DB_TYPE
          value: postgres
        - name: DB_POSTGRESDB_HOST
          value: postgres
        - name: DB_POSTGRESDB_PORT
          value: "5432"
        - name: DB_POSTGRESDB_DATABASE
          valueFrom:
              secretKeyRef:
                name: n8n-secrets
                key: DB_NAME
        - name: DB_POSTGRESDB_USER
          valueFrom:
              secretKeyRef:
                name: n8n-secrets
                key: DB_USER
        - name: DB_POSTGRESDB_PASSWORD
          valueFrom:
              secretKeyRef:
                name: n8n-secrets
                key: DB_PASSWORD
        - name: N8N_JWT_SECRET
          valueFrom:
              secretKeyRef:
                name: n8n-secrets
                key: N8N_JWT_SECRET
        - name: N8N_ENCRYPTION_KEY
          valueFrom:
              secretKeyRef:
                name: n8n-secrets
                key: N8N_ENCRYPTION_KEY
        - name: N8N_HOST
          value: n8n.localhost
        - name: N8N_PROTOCOL
          value: http
        - name: N8N_PORT
          value: "5678"
        - name: N8N_EDITOR_BASE_URL
          value: http://n8n.localhost
        - name: WEBHOOK_URL
          value: http://n8n.localhost
        - name: N8N_SECURE_COOKIE
          value: "false"
        - name: N8N_DIAGNOSTICS_ENABLED
          value: "false"
        volumeMounts:
        - name: n8n-storage
          mountPath: /home/node/.n8n
      volumes:
        - name: n8n-storage
          persistentVolumeClaim:
            claimName: n8n-pvc
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: n8n-worker
  namespace: n8n-ha
spec:
  replicas: 2
  selector:
    matchLabels:
      app: n8n
      role: worker
  template:
    metadata:
      labels:
        app: n8n
        role: worker
    spec:
      containers:
      - name: n8n
        image: n8nio/n8n
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        env:
        - name: DB_TYPE
          value: postgres
        - name: DB_POSTGRESDB_HOST
          value: postgres
        - name: DB_POSTGRESDB_PORT
          value: "5432"
        - name: DB_POSTGRESDB_DATABASE
          valueFrom:
              secretKeyRef:
                name: n8n-secrets
                key: DB_NAME
        - name: DB_POSTGRESDB_USER
          valueFrom:
              secretKeyRef:
                name: n8n-secrets
                key: DB_USER
        - name: DB_POSTGRESDB_PASSWORD
          valueFrom:
              secretKeyRef:
                name: n8n-secrets
                key: DB_PASSWORD
        - name: QUEUE_MODE
          value: redis
        - name: REDIS_HOST
          value: redis
        - name: REDIS_PORT
          value: "6379"
        - name: REDIS_PASSWORD
          valueFrom:
              secretKeyRef:
                name: n8n-secrets
                key: REDIS_PASSWORD
        - name: N8N_JWT_SECRET
          valueFrom:
              secretKeyRef:
                name: n8n-secrets
                key: N8N_JWT_SECRET
        - name: N8N_ENCRYPTION_KEY
          valueFrom:
              secretKeyRef:
                name: n8n-secrets
                key: N8N_ENCRYPTION_KEY
        - name: N8N_WORKER
          value: "true"
        - name: N8N_DIAGNOSTICS_ENABLED
          value: "false"
        - name: N8N_EDITOR_BASE_URL
          value: http://n8n.localhost
        - name: WEBHOOK_URL
          value: http://n8n.localhost

---
apiVersion: v1
kind: Service
metadata:
  name: n8n
  namespace: n8n-ha
spec:
  selector:
    app: n8n
    role: main
  ports:
    - protocol: TCP
      port: 80
      targetPort: 5678
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: n8n-ingress
  namespace: n8n-ha
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
spec:
  rules:
    - host: n8n.localhost
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: n8n
                port:
                  number: 80
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: n8n-pdb
  namespace: n8n-ha
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: n8n

